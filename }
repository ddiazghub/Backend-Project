import { Request, Response } from "express";
import { ceilDate } from "../helpers";

import {
  Order,
  OrderState,
} from "../models/order.model";

import {
  EnumMapping,
  ResourceController,
} from "./controller";

const order = new ResourceController(Order, [["state", "name"]]);
const state = new ResourceController(OrderState);

const States = EnumMapping(OrderState);

export async function getOrders(req: Request, res: Response) {
  const user = req.query.user ? { user: req.query.user } : {};
  const restaurant = req.query.restaurant
    ? { restaurant: req.query.restaurant }
    : {};
  const startDate = req.query.startDate ? { $gte: req.query.startDate } : {};
  const endDate = req.query.endDate
    ? { $lt: ceilDate(new Date(req.query.endDate as string)) }
    : {};
  const dateRange = { createdAt: { ...startDate, ...endDate } };
  const filters = { ...user, ...restaurant, ...dateRange };

  await order.getResources(req, res, filters);
}

export async function getUnconfirmed(req: Request, res: Response) {
  const filters = { state: (await States()).created };

  await order.getResources(req, res, filters);
}
export async function getStates(req: Request, res: Response) {
  await state.getAll(req, res);
}

export async function getOrder(req: Request, res: Response) {
  await order.getResource(req, res);
}

export async function createOrder(req: Request, res: Response) {
  const products = (req.body.products as IOrderProduct[]).map(product => product._id);
  const prods = new Set(products);


  await order.createResource(req, res);
}

export async function updateOrder(req: Request, res: Response) {
  await order.updateResource(req, res);
}

export async function deleteOrder(req: Request, res: Response) {
  await order.deleteResource(req, res);
}
